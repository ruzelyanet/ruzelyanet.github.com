'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (msg, done, kill) {
  if (done === 'done') {
    return doneHandler.call(this, kill);
  }

  if (!optionsRead) {
    optionsRead = true;

    var _ref = this.config.reporterOptions || {};

    var absolutePath = _ref.absolutePath;
    var verbose = _ref.verbose;
    var ruleName = _ref.ruleName;

    options = { absolutePath: absolutePath, verbose: verbose, ruleName: ruleName };
  }

  var isWarning = this.state.severity === 'Warning';

  if (currFile !== this.cache.file) {
    currFile = this.cache.file;
    var filename = void 0;

    if (options.absolutePath) {
      filename = (0, _pathIsAbsolute2.default)(currFile) ? currFile : _path2.default.resolve(currFile);
    } else {
      filename = (0, _pathIsAbsolute2.default)(currFile) ? _path2.default.relative(process.cwd(), currFile) : currFile;
    }

    filenames[currTable.length] = _chalk2.default.underline(filename);
  }

  var column = (0, _lodash2.default)(this.cache.col) ? this.cache.col : -1;
  var rule = options.ruleName ? _chalk2.default.gray(this.cache.rule || '') : '';

  currTable.push(['', _chalk2.default.gray('line ' + this.cache.lineNo), _chalk2.default.gray(column >= 0 ? 'col ' + column : '-'), ((isWarning ? _chalk2.default.yellow(msg) : _chalk2.default.red(msg)) + ' ' + rule).trim(), options.verbose ? _chalk2.default.gray(this.cache.origLine.trim()) : '']);

  return '';
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pathIsAbsolute = require('path-is-absolute');

var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _logSymbols = require('log-symbols');

var _logSymbols2 = _interopRequireDefault(_logSymbols);

var _textTable = require('text-table');

var _textTable2 = _interopRequireDefault(_textTable);

var _lodash = require('lodash.isnumber');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var currFile = void 0;
var currTable = [];
var filenames = [];
var options = void 0;
var optionsRead = false;

function resetState() {
  currFile = undefined;
  currTable = [];
  filenames = [];
  options = undefined;
  optionsRead = false;
}

function createSummary(errs, warns, total, maxErrors, maxWarnings) {
  if (total === 0) {
    return 'No violations';
  }

  var output = '';

  if (errs > 0) {
    output += '  ' + _logSymbols2.default.error + '  ' + errs + ' ' + (errs > 1 ? 'errors' : 'error');

    if ((0, _lodash2.default)(maxErrors)) {
      output += ' (Max Errors: ' + maxErrors + ')';
    }

    output += '\n';
  }

  if (warns > 0) {
    output += '  ' + _logSymbols2.default.warning + '  ' + warns + ' ' + (warns > 1 ? 'warnings' : 'warning');

    if ((0, _lodash2.default)(maxWarnings)) {
      output += ' (Max Warnings: ' + maxWarnings + ')';
    }

    output += '\n';
  }

  return output;
}

function doneHandler(kill) {
  var errs = this.cache.errs.length;
  var warns = this.cache.warnings.length;
  var total = errs + warns;
  var formattedMessage = (0, _textTable2.default)(currTable).split('\n').map(function (msg, i) {
    return filenames[i] ? '\n' + filenames[i] + '\n' + msg : msg;
  }).join('\n') + '\n\n';

  this.cache.msg = '' + formattedMessage + createSummary(errs, warns, total, this.config.maxErrors, this.config.maxWarnings);

  if (kill === 'kill') {
    this.cache.msg += '\nStylint: Over Error or Warning Limit.';
  } else if (total === 0) {
    this.cache.msg = '';
  }

  resetState();

  return this.done();
}

module.exports = exports['default'];
